package com.sloth;

import java.util.ArrayList;
import java.util.List;

import com.jfinal.aop.Aop;
import com.jfinal.config.Constants;
import com.jfinal.config.Handlers;
import com.jfinal.config.Interceptors;
import com.jfinal.config.JFinalConfig;
import com.jfinal.config.Plugins;
import com.jfinal.config.Routes;
import com.jfinal.core.Const;
import com.jfinal.ext.handler.ContextPathHandler;
import com.jfinal.ext.proxy.CglibProxyFactory;
import com.jfinal.json.FastJsonFactory;
import com.jfinal.kit.PathKit;
import com.jfinal.kit.PropKit;
import com.jfinal.plugin.activerecord.ActiveRecordPlugin;
import com.jfinal.plugin.druid.DruidPlugin;
import com.jfinal.template.Engine;
import com.jfinal.template.source.ClassPathSourceFactory;
import com.sloth.common.Module;
import com.sloth.service.ConfigService;
import com.sloth.service.DictService;
import com.sloth.sys.BaseRoutes;
import com.sloth.sys.controller.DownloadController;
import com.sloth.sys.handler.GlobalHandler;
import com.sloth.sys.handler.ResponseExceptionHandler;
import com.sloth.sys.handler.ShiroInterceptor;
import com.sloth.sys.tag.PermissionTag;
import com.sloth.sys.tag.RoleTag;
import com.sloth.sys.tag.WidgetTag;
import com.sloth.sys.util.CtxUtil;

public abstract class AbsConfig extends JFinalConfig {
	private List<Module> modules = new ArrayList<>();

	public AbsConfig() {
		this.configModules(modules);
	}

	public abstract void configModules(List<Module> modules);

	public void configConstant(Constants me) {
		PropKit.use("config.txt");
		me.setProxyFactory(new CglibProxyFactory());
		me.setDevMode(PropKit.getBoolean("devMode", false));
		me.setJsonFactory(new FastJsonFactory());
		me.setError401View("/common/_401.html");
		me.setError403View("/common/_403.html");
		me.setError404View("/common/_404.html");
		me.setError500View("/common/_500.html");
		me.setError500View("/common/_500.html");
		me.setError500View("/common/_500.html");
		me.setMaxPostSize(10 * Const.DEFAULT_MAX_POST_SIZE);
		//配置上传路径
	}

	public final void configRoute(Routes me) {
		me.add("/download", DownloadController.class);
		me.add(new BaseRoutes());
		for (Module module : modules) {
			module.configRoutes(me);
		}
	}

	public void configEngine(Engine me) {
		me.setBaseTemplatePath(PathKit.getRootClassPath());
		me.addDirective("permission", PermissionTag.class);
		me.addDirective("role", RoleTag.class);
		me.addDirective("widget", WidgetTag.class);
		me.addSharedObject("configService", Aop.get(ConfigService.class));
		me.addSharedObject("dictService", Aop.get(DictService.class));
		me.addSharedFunction("/common/include.tpl");
		//内容管理 
		me.addSharedFunction("/common/contentTmpTempl/view_list/search.html");
		me.addSharedFunction("/common/contentTmpTempl/view_list/table.html");
		//input 单行复用模板
		me.addSharedFunction("/common/contentTmpTempl/view_edit/input.html");
		me.addSharedFunction("/common/contentTmpTempl/view_edit/uploadImg.html");
	}

	public static DruidPlugin createDruidPlugin() {
		return new DruidPlugin(PropKit.get("jdbc.url"), PropKit.get("jdbc.user"), PropKit.get("jdbc.pwd").trim());
	}

	public void configPlugin(Plugins me) {
		DruidPlugin druidPlugin = createDruidPlugin();
		me.add(druidPlugin);
		ActiveRecordPlugin arp = new ActiveRecordPlugin(druidPlugin);
		BaseMappingKit.mapping(arp);
		me.add(arp);
		arp.setBaseSqlTemplatePath("sqlfiles");
		arp.getEngine().setSourceFactory(new ClassPathSourceFactory());
		arp.setShowSql(PropKit.getBoolean("showSql", false));
		arp.getEngine().addSharedMethod(new CtxUtil());
		for (Module module : modules) {
			module.configMappings(arp);
		}
	}

	public void configInterceptor(Interceptors me) {
		me.add(new ShiroInterceptor());
		me.add(new ResponseExceptionHandler());
	}

	public void configHandler(Handlers me) {
		me.add(new ContextPathHandler("base"));
		me.add(new GlobalHandler());
	}
}
